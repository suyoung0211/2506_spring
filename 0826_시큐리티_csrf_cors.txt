CSRF는 Cross-Site Request Forgery의 약자입니다.
(사이트간 요청 위조)
🛡️ CSRF란?
웹 보안에서 CSRF는 사용자가 의도하지 않은 요청을 
특정 웹사이트에 보내도록 유도하는 공격 방식입니다. 
사용자가 로그인된 상태에서 악성 웹사이트를 방문하면, 
해당 사이트가 사용자의 권한을 이용해 다른 사이트에 요청을 보내는 방식입니다.
예를 들어, 사용자가 은행 사이트에 로그인한 상태에서 악성 페이지를 열면, 
그 페이지가 사용자의 계좌에서 돈을 이체하는 요청을 자동으로 보낼 수 있습니다
—사용자는 아무것도 클릭하지 않았으나....

🛡️ 방어 방법
CSRF Token 사용: 요청마다 고유한 토큰을 포함시켜 서버가 검증
Referer 검증: 요청의 출처가 신뢰할 수 있는 도메인인지 확인
SameSite 쿠키 설정: 쿠키가 외부 사이트에서 전송되지 않도록 제한

       ->  스프링시큐리티는 Post 방식 form 제출을 csrf 인증토큰 없이는  할 수 없는 것이 기본 설정입니다.
           csrf 공격은 로그인한 사용자의 JSESSIONID 등의 인증값을 공격자가 사용하여
                          해킹 코드를 실행하는 것.(악성 코드를 form post 방식으로 실행)
      ->  시큐리티 권고 사항을 따른다면 form 태그 안에 아래 csrf 토큰값을 저장하도록 합니다.(csrf 활성화)
        ※ <input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}" />
                => post 방식의 form 제출 동작 정상 실행됩니다.


------------------------------------
CORS는 Cross-Origin Resource Sharing
웹 브라우저에서 다른 출처(origin)의 리소스를 요청할 때 발생하는 보안 정책을 제어하는 메커니즘입니다.

🌐 CORS란?
웹 브라우저는 기본적으로 Same-Origin Policy(동일 출처 정책)을 따릅니다. 
즉, 자바스크립트가 로드된 도메인과 다른 도메인에 요청을 보내는 것을 제한합니다. 
하지만 실제 웹 개발에서는 API 서버와 프론트엔드가 서로 다른 도메인에 위치하는 경우가 많기 때문에, 
이런 요청을 허용하기 위해 CORS가 등장했습니다.

🌐 작동 방식
서버는 HTTP 응답 헤더에 다음과 같은 정보를 포함시켜 요청을 허용할 수 있습니다:

Access-Control-Allow-Origin: 허용할 도메인
Access-Control-Allow-Methods: 허용할 HTTP 메서드 (GET, POST 등)
Access-Control-Allow-Headers: 허용할 커스텀 헤더

브라우저는 요청 전에 preflight 요청(OPTIONS 메서드)을 보내 서버가 해당 요청을 허용하는지 확인합니다.