[[[ 토큰 기반 인증 ]]]
토큰 : 식별을 위해 사용하는 문자열. 
최초 로그인시 서버가 특정 알고리즘으로 토큰을 만들어서 클라이언트에게 보내주면 클라이언트 
그 이후에 이 토큰으로 자신의 신분을 증명(인증)한다. 
사용자는 요청시  Authorization 헤더 값으로 "Bearer 토큰문자열" 을 보낸다.

JSON 웹토큰: 전자서명을 하여 만든 토큰. 
전자서명은 평문 메시지를 해시함수를 통해 항상 같은 크기의 문자열로 생성한 후 개인키로 암호화한 값이다.

step 1. 클라이언트가 보낸 아이디와 비밀번호를 서버에 저장된 값과 비교한다. 일치하면 다음 단계.
   ↓↓
step 2. 사용자의 정보를 이용하여 {헤더}.{페이로드}를 만들고 이 값을 🔑서버의 비밀키로 대칭알고리즘 HMAC  🔐암호화한다. 
          ⚡이 값이 전자서명값이다.
   
JWT 형식(평문)
{ // header
“typ”: “JWT”, //토큰 type
“alg”: “HS512” //해시 알고리즘
},
{ // payload
“sub”: 토큰의 주인. 식별값
“iss”: “todo app”, //issuer. 발행자(서비스 이름)
“iat”: 1595733657, //토큰 발행일자 issued at
“exp”: 1596597657 //토큰 만료일자 expiration
},
    ↓↓
step 3. {헤더}.{페이로드}.{전자서명} 와 같이 전자서명을 추가하여 Base64URL로 <인코딩>하여 클라이언트에게 보낸다.
    ↓↓
step 4. 클라이언트가 이 값을 받아서 저장한다. 서버에게 요청을 보낼 때 마다 Authorization 헤더에 이 값을 전송한다.
    ↓↓
step 5. 서버는 클라이언트가 보낸 Authorization 헤더 값  JWT를 {헤더}.{페이로드}.{🎫전자서명} 세 부분으로 분리
    ↓↓
step 6. step 5의 {헤더}.{페이로드} 는 🔑서버 비밀키로  🧧전자서명 생성
    ↓↓
step 7. step 5에서 클라이언트가 보낸 🎫전자서명값과 서버가 계산한 🧧전자서명이 같으면 무결성 검증 성공
    ↓↓
step 8. 추가로 exp, iss, aud 등을 확인해 만료 여부와 대상 적합성 확인하여 인증 완료 한다.



